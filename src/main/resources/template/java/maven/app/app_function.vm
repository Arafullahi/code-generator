#set($appName=${APP.getName().toLowerCase()})
#set($appGivenName=${APP.getName()})
#set($projectName=${CodeAppUtil.containerAppName($APP).toLowerCase()})

package ${DEFAULT__APP_FUNCTION_DIRECTORY.value};

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.ibs.cds.gode.app.AppEndpoint;
import org.ibs.cds.gode.app.AppProcessEndpoint;
import org.ibs.cds.gode.entity.generic.DataMap;
import org.ibs.cds.gode.entity.operation.Processor;
import org.ibs.cds.gode.web.Request;
import org.ibs.cds.gode.web.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
#foreach($function in $APP.appFunction.functions)
import ${DEFAULT__APP_FUNCTION_DIRECTORY.value}.${function.name.toLowerCase()}.*;
#end

@RestController
@AppEndpoint
@Api(tags = "${appGivenName} Functions")
public class ${appGivenName}Function extends AppProcessEndpoint {


    private ${appGivenName}Manager manager;
    #foreach($function in $APP.appFunction.functions)
    private ${function.name} ${function.methodName};
    #end

    @Autowired
    public ${appGivenName}Function(${appGivenName}Manager manager){
        this.manager = manager;
        #foreach($function in $APP.appFunction.functions)
        this.${function.methodName} = new ${function.name}();
        #end
    }


    #foreach($function in $APP.appFunction.functions)
       @PostMapping(path = "/$appName/${function.methodName}")
       @ApiOperation("Function - ${function.methodName} operation")
       public Response<${function.output.name}> $function.methodName (@RequestBody Request<${function.input.name}> request){
        return Processor.successResponse(${function.methodName}.run(request.getData(), manager), request,"/$appName/${function.methodName}");
       }
    #end

}
