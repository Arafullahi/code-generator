scalar Date

#set($objects = $APP.getObjectFields())
type Query{
#foreach($entity in $APP.entities)
    #if($entity.storePolicy.isAvailable())
    find${entity.name}(id :ID) :${entity.name}
    #end
#end
#foreach($dependency in $APP.dependencies)
    #if($dependency.storePolicy.isAvailable())
    find${dependency.name}(id :ID) :${dependency.name}
    #end
#end
#foreach($relationship in $APP.relationships)
    find${relationship.name}(id :ID) :${relationship.name}
#end
}

type Mutation{
#foreach($entity in $APP.entities)
    #if($entity.storePolicy.isAvailable())
    save${entity.name}(entity: ${entity.name}Request): ${entity.name}
    delete${entity.name}(id: ID) : Boolean
    deactivate${entity.name}(id: ID) : Boolean
    validate${entity.name}(entity: ${entity.name}Request) : Boolean
    #end
#end
#foreach($dependency in $APP.dependencies)
    #if($dependency.storePolicy.isAvailable())
    save${dependency.name}(entity: ${dependency.name}Request): ${dependency.name}
    delete${dependency.name}(id: ID) : Boolean
    deactivate${dependency.name}(id: ID) : Boolean
    validate${dependency.name}(entity: ${dependency.name}Request) : Boolean
    #end
#end
#foreach($relationship in $APP.relationships)
save${relationship.name}(entity: ${relationship.name}Request): ${relationship.name}
delete${relationship.name}(id: ID) : Boolean
deactivate${relationship.name}(id: ID) : Boolean
validate${relationship.name}(entity: ${relationship.name}Request) : Boolean
#end
}

#foreach($entity in $APP.entities)
type ${entity.name}{
    ${entity.idField.object.name} : ID
    #foreach ($field in ${entity.fields})
        $field.object.name :$field.graphQLType
    #end
}

input ${entity.name}Request {
    ${entity.idField.object.name} : ID
    #foreach ($field in ${entity.fields})
        #if($field.objectField)
            $field.object.name :${field.graphQLType}Request
        #else
            $field.object.name :$field.graphQLType
        #end
    #end
}
#end

#foreach($object in $objects)
type ${object.name}{
    #foreach ($graphType in ${object.graphQLTypes})
        $graphType.left : $graphType.right
    #end
}

input ${object.name}Request{
    #foreach ($graphType in ${object.graphQLTypes})
        $graphType.left : $graphType.right
    #end
}
#end


#foreach($dependency in $APP.dependencies)
type ${dependency.name}{
    ${dependency.idField.object.name} : ID
    #foreach ($dfield in ${dependency.fields})
        $dfield.object.name :$dfield.graphQLType
    #end
}

input ${dependency.name}Request {
    ${dependency.idField.object.name} : ID
    #foreach ($dfield in ${dependency.fields})
        $dfield.object.name :$dfield.graphQLType
    #end
}
#end

#foreach($relationship in $APP.relationships)
type ${relationship.name}{
relationshipId : ID
    #foreach ($dfield in ${relationship.fields})
        $dfield.object.name :$dfield.graphQLType
    #end
}

input ${relationship.name}Request {
relationshipId : ID
    #foreach ($dfield in ${relationship.fields})
        $dfield.object.name :$dfield.graphQLType
    #end
}
#end
