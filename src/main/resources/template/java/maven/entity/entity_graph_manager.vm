#set($entityGivenName=${ENTITY.getName()})
#set($entityStorePolicy=${ENTITY.getStorePolicy()})
#set($idFieldType = $ENTITY.getIdField().getObject().getFQN())

package $DEFAULT__ENTITY_GQL_DIRECTORY.value;


import ${DEFAULT__ENTITY_MANAGER_DIRECTORY.value}.${entityGivenName}Manager;
import ${DEFAULT__ENTITY_TYPE_DIRECTORY.value}.${entityGivenName};
import org.ibs.cds.gode.entity.manager.GraphQueryManager;
import org.ibs.cds.gode.entity.validation.ValidationStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ${entityGivenName}GraphManager extends GraphQueryManager<${entityGivenName}Manager,${entityGivenName},${entityGivenName}, $idFieldType> {

  @Autowired
  public ${entityGivenName}GraphManager(${entityGivenName}Manager manager) {
    super(manager);
  }

  public Class<${entityGivenName}> getEntityClass(){
    return ${entityGivenName}.class;
  }

  public ${entityGivenName} save${entityGivenName}(${entityGivenName}Request entity){
    return super.save(entity);
  }

  public ValidationStatus validate${entityGivenName}(${entityGivenName}Request entity){
    return super.validateView(entity);
  }

  public ${entityGivenName} find${entityGivenName}($idFieldType id){
    return super.find(id);
  }

  public Boolean deactivate${entityGivenName}($idFieldType id){
    return super.deactivate(id);
  }

  public Boolean delete${entityGivenName}($idFieldType id){
    return super.deactivate(id);
  }

}
