#set($entityGivenName=${ENTITY.getName()})
#set($entityName=${ENTITY.getName().toLowerCase()})
#set($entityStorePolicy=${ENTITY.getStorePolicy()})
#set($storedEntity = ${entityStorePolicy.hasDatabase()})
#set($idFieldName = $ENTITY.getIdField().getObject().getName())
#set($idFieldType = $ENTITY.getIdField().getObject().getFQN())
#set($isCached = ${entityStorePolicy.isCached()})
#if($storedEntity)
    #set($storeType = ${entityStorePolicy.policy.storeName.storeType})
    #set($storeEssentials = ${StoreUtils.essential($storeType)})
#end

package $DEFAULT__ENTITY_TYPE_DIRECTORY.value;

import lombok.Data;
#if($storedEntity)
import ${storeEssentials.entityAnnotation.fqn()};
import $storeEssentials.entityType.fqn();
import $storeEssentials.idAnnotation.fqn();
#else
import org.ibs.cds.gode.entity.view.EntityView;
#end

#if($isCached)
import org.ibs.cds.gode.entity.cache.KeyId;
import org.ibs.cds.gode.entity.cache.CacheableEntity;
import org.ibs.cds.gode.entity.cache.CacheEntity;
#end

#if($storedEntity)
@$storeEssentials.entityAnnotation.name
#end
#if(${storeEssentials.isMongo()})
@org.mongodb.morphia.annotations.Entity
#end
@Data
#if($storedEntity && $isCached)
    public class $entityGivenName extends $storeEssentials.entityType.name<$idFieldType> implements CacheableEntity<$idFieldType> {
        private @$storeEssentials.idAnnotation.name @KeyId $idFieldType $idFieldName;
#elseif($storedEntity)
    public class $entityGivenName extends $storeEssentials.entityType.name<$idFieldType> {
        private @$storeEssentials.idAnnotation.name $idFieldType $idFieldName;
#elseif($isCached)
    public class $entityGivenName extends CacheEntity<$idFieldType> {
        private @KeyId $idFieldType $idFieldName;
#else
    public class $entityGivenName extends EntityView<$idFieldType> {
        private $idFieldType $idFieldName;
#end

    #foreach($field in $ENTITY.fields)
        #set($fieldName = $field.getObject().getName())
        #set($fieldType = $field.getObject().getFQN())
     #if($field.objectField && $storeEssentials.isJPA())
     @javax.persistence.Embedded
     #end
    private $fieldType $fieldName;
    #end

    public $idFieldType getId(){
        return $idFieldName;
    }

    public void setId($idFieldType $idFieldName){
        this.$idFieldName = $idFieldName;
    }

    #if($ENTITY.sequenceFieldsAvailable)
    public java.util.Optional<AutoIncrementField[]> userIncrementFields(){
        #set($seq_fields =  ${ENTITY.getAutoSequenceFieldList()})
        return java.util.Optional.of(new AutoIncrementField[]{
        #foreach($seq_field in $seq_fields)
            #set($fieldName = ${StringUtils.capitalize(${seq_field.getObject().getName()})})
            AutoIncrementField.of(this::get${fieldName}, this::set${fieldName}),
        #end
        });
     }
    #end
}
